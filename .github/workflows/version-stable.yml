name: Version Stable Release

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      design-system: ${{ steps.filter.outputs.design-system }}
      new-portfolio: ${{ steps.filter.outputs.new-portfolio }}
      fonts: ${{ steps.filter.outputs.fonts }}
      styling: ${{ steps.filter.outputs.styling }}
      any-changes: ${{ steps.check-any.outputs.any-changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            design-system:
              - 'packages/design-system/**'
            new-portfolio:
              - 'apps/new-portfolio/**'
            fonts:
              - 'packages/fonts/**'
            styling:
              - 'packages/styling/**'

      - name: Check if any package changed
        id: check-any
        run: |
          if [ "${{ steps.filter.outputs.design-system }}" = "true" ] || \
             [ "${{ steps.filter.outputs.new-portfolio }}" = "true" ] || \
             [ "${{ steps.filter.outputs.fonts }}" = "true" ] || \
             [ "${{ steps.filter.outputs.styling }}" = "true" ]; then
            echo "any-changes=true" >> $GITHUB_OUTPUT
          else
            echo "any-changes=false" >> $GITHUB_OUTPUT
          fi

  version-release:
    name: Version and Release Changed Packages
    needs: detect-changes
    if: needs.detect-changes.outputs.any-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: pnpm install

      - name: Create Release Pull Request or Publish to NPM
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
          title: "Release: Version Packages"
          commit: "chore: release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Parse published packages and create GitHub releases
          echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[] | "\(.name)@\(.version)"' | while read package; do
            name=$(echo $package | cut -d'@' -f1)
            version=$(echo $package | cut -d'@' -f2)
            
            # Create a GitHub release for each published package
            gh release create "${name}-v${version}" \
              --title "${name} v${version}" \
              --notes "Release of ${name} version ${version}" \
              --target main
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Production Deployments
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Packages published, production deployments will be triggered by the production-deploy.yml workflow"

  # Trigger production deployment after versioning
  trigger-production-deploy:
    name: Trigger Production Deployment
    needs: [detect-changes, version-release]
    if: always() && needs.detect-changes.outputs.any-changes == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: production-deploy
          client-payload: |
            {
              "design-system": "${{ needs.detect-changes.outputs.design-system }}",
              "new-portfolio": "${{ needs.detect-changes.outputs.new-portfolio }}",
              "fonts": "${{ needs.detect-changes.outputs.fonts }}",
              "styling": "${{ needs.detect-changes.outputs.styling }}"
            }
